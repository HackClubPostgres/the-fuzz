{"version":3,"sources":["../src/util.js"],"names":["token","process","env","SLACK_TOKEN","web","WebClient","maxRequestConcurrency","web_admin","SLACK_LEGACY_TOKEN","joinChannel","channelId","conversations","join","channel","joinEveryChannel","paginate","types","exclude_archived","page","channels","filter","c","num_members","is_member","forEach","id","getNameFromSlackUser","userId","users","info","user","real_name","getAirtableRecordForSlackUser","airtable","airFind","result","givenName","airCreate","record","banUserFromChannel","modUserId","reason","time","modName","For","Type","Date","now","chrono","parseDate","Reason","muteUserInChannel","muteUserInSlack","getActivePunishmentsForSlackUser","type","airtableUser","airGet","records","removeUserFromChannel","kick","deleteMessage","messageTs","chat","ts","slackUserIsAdmin","response","is_admin","sendPm","message","open","postMessage","text"],"mappings":"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","sourcesContent":["import { WebClient } from '@slack/web-api'\nimport * as airtable from './airtable-util'\nimport * as chrono from 'chrono-node'\n\nconst token = process.env.SLACK_TOKEN\nconst web = new WebClient(token, { maxRequestConcurrency: 2 })\nconst web_admin = new WebClient(process.env.SLACK_LEGACY_TOKEN)\n\nexport async function joinChannel(channelId) {\n  await web.conversations.join({\n    channel: channelId,\n  })\n}\n\nexport async function joinEveryChannel() {\n  for await (const page of web.paginate('conversations.list', {\n    types: 'public_channel',\n    exclude_archived: true,\n  })) {\n    page.channels\n      .filter(c => c.num_members > 0 && c.is_member == false)\n      .forEach(async c => {\n        let id = c.id\n\n        await joinChannel(id)\n      })\n  }\n}\n\nexport async function getNameFromSlackUser(userId) {\n  let user = await web.users.info({\n    user: userId,\n  })\n\n  return user.user.real_name\n}\n\nexport async function getAirtableRecordForSlackUser(userId) {\n  let result = await airtable.airFind('Users', 'Slack ID', userId)\n  if (!result) {\n    // need to create user\n    let user = await web.users.info({\n      user: userId,\n    })\n    let givenName = user.user.real_name\n\n    let record = await airtable.airCreate('Users', {\n      'Slack ID': userId,\n      'Given Name': givenName,\n    })\n    return record\n  } else {\n    return result\n  }\n}\n\nexport async function banUserFromChannel(\n  modUserId,\n  userId,\n  channelId,\n  reason,\n  time\n) {\n  // get airtable record for user\n  let user = await getAirtableRecordForSlackUser(userId)\n  let modName = await getNameFromSlackUser(modUserId)\n\n  // create punishment\n  let record = await airtable.airCreate('Punishments', {\n    For: [user.id],\n    Type: 'channel_ban',\n    'Channel ID': channelId,\n    'Given At': Date.now(),\n    'Valid Until': chrono.parseDate(time + ' from now'),\n    Reason: reason,\n    'Moderator Name': modName,\n  })\n\n  return record\n}\n\nexport async function muteUserInChannel(\n  modUserId,\n  userId,\n  channelId,\n  reason,\n  time\n) {\n  let user = await getAirtableRecordForSlackUser(userId)\n  let modName = await getNameFromSlackUser(modUserId)\n\n  // create punishment\n  let record = await airtable.airCreate('Punishments', {\n    For: [user.id],\n    Type: 'channel_mute',\n    'Channel ID': channelId,\n    'Given At': Date.now(),\n    'Valid Until': chrono.parseDate(time + ' from now'),\n    Reason: reason,\n    'Moderator Name': modName,\n  })\n\n  return record\n}\n\nexport async function muteUserInSlack(modUserId, userId, reason, time) {\n  let user = await getAirtableRecordForSlackUser(userId)\n  let modName = await getNameFromSlackUser(modUserId)\n\n  // create punishment\n  let record = await airtable.airCreate('Punishments', {\n    For: [user.id],\n    Type: 'full_mute',\n    'Given At': Date.now(),\n    'Valid Until': chrono.parseDate(time + ' from now'),\n    Reason: reason,\n    'Moderator Name': modName,\n  })\n\n  return record\n}\n\nexport async function getActivePunishmentsForSlackUser(userId, type) {\n  let airtableUser = await getAirtableRecordForSlackUser(userId)\n\n  let records\n\n  switch (type) {\n    case 'channel_ban':\n      records = await airtable.airGet(\n        'Punishments',\n        'AND({For} = \"' +\n          userId +\n          '\", {Type} = \"channel_ban\", IS_AFTER({Valid Until}, NOW()) = 1)'\n      )\n      break\n    case 'channel_mute':\n      records = await airtable.airGet(\n        'Punishments',\n        'AND({For} = \"' +\n          userId +\n          '\", {Type} = \"channel_mute\", IS_AFTER({Valid Until}, NOW()) = 1)'\n      )\n      break\n    case 'full_mute':\n      records = await airtable.airGet(\n        'Punishments',\n        'AND({For} = \"' +\n          userId +\n          '\", {Type} = \"full_mute\", IS_AFTER({Valid Until}, NOW()) = 1)'\n      )\n      break\n    default:\n      records = await airtable.airGet(\n        'Punishments',\n        'AND({For} = \"' + userId + '\", IS_AFTER({Valid Until}, NOW()) = 1)'\n      )\n  }\n\n  return records\n}\n\nexport async function removeUserFromChannel(userId, channelId) {\n  await web_admin.conversations.kick({\n    channel: channelId,\n    user: userId,\n  })\n}\n\nexport async function deleteMessage(channelId, messageTs) {\n  await web_admin.chat.delete({\n    channel: channelId,\n    ts: messageTs,\n  })\n}\n\nexport async function slackUserIsAdmin(userId) {\n  let response = await web.users.info({\n    user: userId,\n  })\n\n  return response.user.is_admin\n}\n\nexport async function sendPm(userId, message) {\n  let response = await web.conversations.open({\n    users: userId,\n  })\n\n  await web.chat.postMessage({\n    channel: response.channel.id,\n    text: message,\n  })\n}\n"],"file":"util.js"}