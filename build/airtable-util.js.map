{"version":3,"sources":["../src/airtable-util.js"],"names":["require","config","bases","moderation","Airtable","apiKey","process","env","AIRTABLE_KEY","base","MODERATION_BASE","airtableRatelimiter","Bottleneck","minTime","airPatch","tableName","recordID","values","options","schedule","priority","Promise","resolve","reject","timestamp","Date","now","update","err","record","console","error","airCreate","fields","create","Error","airFind","fieldName","value","airGet","selectBy","maxRecords","records","searchArg","tertiaryArg","filterByFormula","select","all","data"],"mappings":"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","sourcesContent":["import Bottleneck from 'bottleneck'\nimport Airtable from 'airtable'\nrequire('dotenv').config()\n\nconst bases = {}\n\nbases.moderation = new Airtable({ apiKey: process.env.AIRTABLE_KEY }).base(\n  process.env.MODERATION_BASE\n)\n\nconst airtableRatelimiter = new Bottleneck({\n  // maxConcurrent: 5,\n  minTime: 200,\n})\n\nexport const airPatch = (tableName, recordID, values, options = {}) =>\n  airtableRatelimiter.schedule(\n    { priority: options.priority || 5 },\n    () =>\n      new Promise((resolve, reject) => {\n        const timestamp = Date.now()\n        // console.log(\n        //   `I'm asking Airtable to patch ${recordID} record in ${tableName} base at ${timestamp} with the new values: ${JSON.stringify(\n        //     values\n        //   )}`\n        // )\n        const base = bases[options.base || 'operations']\n        base(tableName).update(recordID, values, (err, record) => {\n          if (err) {\n            console.error(err)\n            reject(err)\n          }\n          // console.log(\n          //   `Airtable updated my ${tableName} record from ${timestamp} in ${Date.now() -\n          //     timestamp}ms`\n          // )\n          resolve(record)\n        })\n      })\n  )\n\nexport const airCreate = (tableName, fields, options = {}) =>\n  airtableRatelimiter.schedule(\n    { priority: options.priority || 5 },\n    () =>\n      new Promise((resolve, reject) => {\n        const timestamp = Date.now()\n        // console.log(\n        //   `I'm asking Airtable to create a new record in the ${tableName} base at ${timestamp}`\n        // )\n        const base = bases[options.base || 'moderation']\n        base(tableName).create(fields, (err, record) => {\n          if (err) {\n            console.error(err)\n            reject(err)\n          }\n          if (!record) {\n            reject(new Error('Record not created'))\n          }\n          // console.log(\n          //   `Airtable saved my ${tableName} record from ${timestamp} in ${Date.now() -\n          //     timestamp}ms`\n          // )\n          resolve(record)\n        })\n      })\n  )\n\nexport const airFind = async (tableName, fieldName, value, options = {}) => {\n  // see airGet() for usage\n\n  // note: we're not using a rate-limiter here b/c it's just a wrapper\n  // function for airGet, which is already rate-limited\n  const records = await airGet(tableName, fieldName, value, {\n    ...options,\n    selectBy: { ...options.selectBy, maxRecords: 1 },\n  })\n  return (records || [])[0]\n}\n\nexport const airGet = (\n  tableName,\n  searchArg = null,\n  tertiaryArg = null,\n  options = {}\n) =>\n  airtableRatelimiter.schedule(\n    { priority: options.priority || 5 },\n    () =>\n      new Promise((resolve, reject) => {\n        // usage:\n        // for key/value lookup: `airGet('Clubs', 'Slack Channel ID', slackChannelID)`\n        // for formula lookup: `airGet('Clubs', '{Slack Channel ID} = BLANK()')`\n        // for all records: `airGet('People')`\n\n        const timestamp = Date.now()\n\n        const selectBy = options.selectBy || {}\n        if (searchArg === null) {\n          // console.log(\n          //   `I'm asking AirTable to send me ALL records in the \"${tableName}\" base. The timestamp is ${timestamp}`\n          // )\n        } else {\n          if (tertiaryArg) {\n            // this is a key/value lookup\n            selectBy.filterByFormula = `{${searchArg}} = \"${tertiaryArg}\"`\n          } else {\n            // this is a formula lookup\n            selectBy.filterByFormula = searchArg\n          }\n\n          // console.log(\n          //   `I wrote a query & sent it to AirTable with a timestamp of ${timestamp}: BASE=\\`${tableName}\\` FILTER=\\`${selectBy.filterByFormula}\\``\n          // )\n        }\n\n        const base = bases[options.base || 'moderation']\n        base(tableName)\n          .select(selectBy)\n          .all((err, data) => {\n            if (err) {\n              console.error(err)\n              reject(err)\n            }\n            // console.log(\n            //   `AirTable got back to me from my question at ${timestamp} with ${\n            //     data.length\n            //   } records. The query took ${Date.now() - timestamp}ms`\n            // )\n            resolve(data)\n          })\n      })\n  )\n"],"file":"airtable-util.js"}